import React, { useEffect, useState } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { PostConfig } from '../api/blog/posts/database/post.interface';
import { FormSendPost } from '../../components/Mains/blogLanding/utils/FormSendPost'; 
import { Modal } from '../../utils/portals/modalPortal';
import { usePortalProvider } from '../../utils/providers/modalProvider';
import { PageLoader } from '../../components/Layout/Spiners&Loaders/PageLoader';
import { HeaderBackTo } from '../../components/Layout/Headers/HeaderBackTo';
import { BlogLanding } from '../../components/Mains/blogLanding/BlogLanding';
import { Footer } from '../../components/Layout/Footers/Footer';

export default function Blog() {

    const { modalSwitch, setModalSwitch } = usePortalProvider();
    const router = useRouter();

    const [showStarterPage, setShowStarterPage] = useState<boolean>(true);
    const [postIdData, setPostIdData] = useState<PostConfig>({} as PostConfig);
    const [postsList, setPostsList] = useState<PostConfig[]>([]);

    useEffect(() => {
        function handlePageLoad() {
            const timerId = setTimeout(() => {
                setShowStarterPage(!showStarterPage);
            }, 1500);

            // Return a function to clear the timer before the component is unmounted.
            return () => {
                clearTimeout(timerId);
            }
        }

        handlePageLoad();
    }, []);

    useEffect(() => {
        let mounted = true;

        const fetchPostsData = async () => {
            const id = router.asPath.split('/').pop();
            if (typeof id === 'string') {
                if (mounted) {
                    const response = await fetch('/api/blog/posts');
                    const data = await response.json();
                    const filteredData: PostConfig = await data.filter((post: any) => post.id === id)[0];
                    console.log(filteredData)
                    setPostIdData(filteredData);
                }
            }
        };

        const fetchAllPostsData = async () => {
            const response = await fetch('/api/blog/posts');
            const data = await response.json();
            setPostsList(data);
        };

        fetchPostsData();
        fetchAllPostsData();

        return () => {
            mounted = false;
        };

    }, [router.asPath, postsList]);

    return (
        <>
            <Head>
                <title>Blog</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {
                showStarterPage ? (
                    <PageLoader />
                ) : (
                    <body className='BLOG-PAGE'>
                        <HeaderBackTo />
                        <main className='blog'>
                            <BlogLanding
                                title={postIdData?.title}
                                subtitle={postIdData?.subtitle}
                                img={
                                    {
                                        src: postIdData?.img.src,
                                        alt: postIdData?.img.alt,
                                        loading: postIdData?.img.loading
                                    }
                                }
                                description={postIdData?.description}
                                comments={postIdData?.comments}
                            />
                        </main>
                        <button onClick={() => { setModalSwitch(!modalSwitch) }}>enviar</button>
                        {!!modalSwitch && (
                            <Modal>
                                <FormSendPost />
                            </Modal>
                        )}
                        <Footer />
                    </body>
                )
            }
        </>
    )
}